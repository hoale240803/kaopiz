name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: KaopizAuthTest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=KaopizAuthTest;Username=postgres;Password=password"

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/KaopizAuth.WebApp/package-lock.json

    - name: Install dependencies
      working-directory: src/KaopizAuth.WebApp
      run: npm ci

    - name: Type check
      working-directory: src/KaopizAuth.WebApp
      run: npm run type-check

    - name: Lint code
      working-directory: src/KaopizAuth.WebApp
      run: npm run lint

    - name: Build application
      working-directory: src/KaopizAuth.WebApp
      run: npm run build

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Check for vulnerable packages
      run: dotnet list package --vulnerable --include-transitive || exit 0

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for WebApp
      id: meta-webapp
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}-webapp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha

    - name: Build and push WebApp image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.webapp
        push: true
        tags: ${{ steps.meta-webapp.outputs.tags }}
        labels: ${{ steps.meta-webapp.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max