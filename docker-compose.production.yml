version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: kaopizauth-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - kaopizauth-api
    networks:
      - kaopizauth-network
    restart: unless-stopped

  kaopizauth-db:
    image: postgres:15
    container_name: kaopizauth-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-KaopizAuth}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db-init:/docker-entrypoint-initdb.d:ro
      - postgres_backups:/backups
    networks:
      - kaopizauth-network
    restart: unless-stopped
    command: >
      postgres 
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  kaopizauth-redis:
    image: redis:7-alpine
    container_name: kaopizauth-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    networks:
      - kaopizauth-network
    restart: unless-stopped

  kaopizauth-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api.production
    container_name: kaopizauth-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=kaopizauth-db;Database=${DB_NAME:-KaopizAuth};Username=${DB_USER:-postgres};Password=${DB_PASSWORD};Pooling=true;Maximum Pool Size=100;
      - ConnectionStrings__RedisConnection=kaopizauth-redis:6379
      - JWT__SecretKey=${JWT_SECRET_KEY}
      - JWT__Issuer=${JWT_ISSUER:-KaopizAuth}
      - JWT__Audience=${JWT_AUDIENCE:-KaopizAuth-Users}
      - JWT__AccessTokenExpirationMinutes=${JWT_ACCESS_TOKEN_EXPIRATION:-15}
      - JWT__RefreshTokenExpirationDays=${JWT_REFRESH_TOKEN_EXPIRATION:-7}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-https://yourdomain.com}
    volumes:
      - api_logs:/app/logs
      - api_data:/app/data
    depends_on:
      - kaopizauth-db
      - kaopizauth-redis
    networks:
      - kaopizauth-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  kaopizauth-webapp:
    build:
      context: .
      dockerfile: docker/Dockerfile.webapp
      args:
        - NODE_ENV=production
        - VITE_API_URL=${API_URL:-https://api.yourdomain.com}
    container_name: kaopizauth-webapp
    environment:
      - NODE_ENV=production
    volumes:
      - webapp_logs:/app/logs
    depends_on:
      - kaopizauth-api
    networks:
      - kaopizauth-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Database backup service
  db-backup:
    image: postgres:15
    container_name: kaopizauth-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - kaopizauth-network
    depends_on:
      - kaopizauth-db
    restart: "no"
    command: >
      sh -c "
        while true; do
          sleep 86400;
          /backup.sh;
        done
      "

  # Log aggregation and monitoring
  promtail:
    image: grafana/promtail:latest
    container_name: kaopizauth-promtail
    volumes:
      - api_logs:/var/log/api:ro
      - webapp_logs:/var/log/webapp:ro
      - nginx_logs:/var/log/nginx:ro
      - ./docker/promtail-config.yml:/etc/promtail/config.yml:ro
    networks:
      - kaopizauth-network
    restart: unless-stopped
    depends_on:
      - kaopizauth-api
      - kaopizauth-webapp

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  webapp_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  kaopizauth-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16